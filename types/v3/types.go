// Code generated by bencgen go. DO NOT EDIT.
// source: types.benc

package v3

import (
    "github.com/deneonet/benc/std"
    "github.com/deneonet/benc/impl/gen"


)

// Struct - otel
type Otel struct {
    Timestampmsvalue int64
    Hashvalue uint64
    Oteltype uint16
    Buf []byte
}

// Reserved Ids - otel
var otelRIds = []uint16{}

// Size - otel
func (otel *Otel) Size() int {
    return otel.NestedSize(0)
}

// Nested Size - otel
func (otel *Otel) NestedSize(id uint16) (s int) {
    s += bstd.SizeInt64() + 2
    s += bstd.SizeUint64() + 2
    s += bstd.SizeUint16() + 2
    s += bstd.SizeBytes(otel.Buf) + 2

    if id > 255 {
        s += 5
        return
    }
    s += 4
    return
}

// SizePlain - otel
func (otel *Otel) SizePlain() (s int) {
    s += bstd.SizeInt64()
    s += bstd.SizeUint64()
    s += bstd.SizeUint16()
    s += bstd.SizeBytes(otel.Buf)
    return
}

// Marshal - otel
func (otel *Otel) Marshal(b []byte) {
    otel.NestedMarshal(0, b, 0)
}

// Nested Marshal - otel
func (otel *Otel) NestedMarshal(tn int, b []byte, id uint16) (n int) {
    n = bgenimpl.MarshalTag(tn, b, bgenimpl.Container, id)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Fixed64, 1)
    n = bstd.MarshalInt64(n, b, otel.Timestampmsvalue)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Fixed64, 2)
    n = bstd.MarshalUint64(n, b, otel.Hashvalue)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Fixed16, 3)
    n = bstd.MarshalUint16(n, b, otel.Oteltype)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Bytes, 4)
    n = bstd.MarshalBytes(n, b, otel.Buf)

    n += 2
    b[n-2] = 1
    b[n-1] = 1
    return
}

// MarshalPlain - otel
func (otel *Otel) MarshalPlain(tn int, b []byte) (n int) {
    n = tn
    n = bstd.MarshalInt64(n, b, otel.Timestampmsvalue)
    n = bstd.MarshalUint64(n, b, otel.Hashvalue)
    n = bstd.MarshalUint16(n, b, otel.Oteltype)
    n = bstd.MarshalBytes(n, b, otel.Buf)
    return n
}

// Unmarshal - otel
func (otel *Otel) Unmarshal(b []byte) (err error) {
    _, err = otel.NestedUnmarshal(0, b, []uint16{}, 0)
    return
}

// Nested Unmarshal - otel
func (otel *Otel) NestedUnmarshal(tn int, b []byte, r []uint16, id uint16) (n int, err error) {
    var ok bool
    if n, ok, err = bgenimpl.HandleCompatibility(tn, b, r, id); !ok {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, otelRIds, 1); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, otel.Timestampmsvalue, err = bstd.UnmarshalInt64(n, b); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, otelRIds, 2); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, otel.Hashvalue, err = bstd.UnmarshalUint64(n, b); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, otelRIds, 3); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, otel.Oteltype, err = bstd.UnmarshalUint16(n, b); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, otelRIds, 4); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, otel.Buf, err = bstd.UnmarshalBytes(n, b); err != nil {
            return
        }
    }
    n += 2
    return
}

// UnmarshalPlain - otel
func (otel *Otel) UnmarshalPlain(tn int, b []byte) (n int, err error) {
    n = tn
    if n, otel.Timestampmsvalue, err = bstd.UnmarshalInt64(n, b); err != nil {
        return
    }
    if n, otel.Hashvalue, err = bstd.UnmarshalUint64(n, b); err != nil {
        return
    }
    if n, otel.Oteltype, err = bstd.UnmarshalUint16(n, b); err != nil {
        return
    }
    if n, otel.Buf, err = bstd.UnmarshalBytes(n, b); err != nil {
        return
    }
    return
}

